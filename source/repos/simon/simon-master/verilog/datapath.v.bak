module datapath(
	input clk,
	
	// from VGA controller (using 320x240 resolution) to decide which color to use for each pixel
	input [2:0]	xvga,
	input [2:0]	yvga,
	
	// RAM stuff
	input [1:0] dout,			// data being pointed to by raddr
	
	// Keyboard stuff
	input 		key_pressed,
	input [7:0] keycode,
	
	// from controller
	input s_raddr,
	input en_raddr,
	input s_waddr,
	input en_waddr,
	input s_level,
	input en_level,
	input s_bg, 
	input en_bg,
	input en_rng,
	input res_wait_timer,
	input res_disp_timer,
	
	// to controller
	output enter_pressed,
	output input_pressed,
	output input_released,
	output red_pulse,
	output green_pulse,
	output yellow_pulse,
	output blue_pulse,
	output raddr_eq_level,
	output waddr_eq_max,
	output raddr_eq_max,
	output correct,
	
	// to RAM
	output 		 		we,		// should we store data in RAM?
	output reg [1:0] 	din, 	// data to be stored in RAM (rng)
	output reg [7:0] 	raddr, 	// addr to get data in RAM
	output reg [7:0] 	waddr, 	// addr to write data in RAM

	// color to send to VGA controller
	output reg [7:0] 	color,	
	);
	
	/****************************************************************************/
	/* PARAMETERS																*/
	/****************************************************************************/
	parameter MAX 			= 256;
	parameter ENTER_KEY 	= 3'd4;
	parameter INVALID_INPUT	= 3'd5;

	/****************************************************************************/
	/* INTERNAL WIRES															*/
	/****************************************************************************/
	wire [2:0] code;


	/****************************************************************************/
	/* INTERNAL REGISTERS														*/
	/****************************************************************************/
	reg [3:0] bg;		// switch to background ROM
	reg [5:0] level;	// decide when to update state


	/****************************************************************************/
	/* INTERNAL MODULES															*/
	/****************************************************************************/
	lsfr random_number_generator (
		.clk  	(clk),
		.q 		(din)		// load into RAM when write is enabled
	);
	
	timer wait_timer (
		.clk   (clk),
		.reset (res_wait_timer),
		.pulse (wait_timer_pulse)
	);
	wait_timer.MAX_COUNT = 18'd5_000_000;
	
	timer disp_timer (
		.clk   (clk),
		.reset (res_disp_timer),
		.pulse (disp_timer_pulse)
	);
	disp_timer.MAX_COUNT = 18'd25_000_000;

	keycode_decoder input_decoder(
		.keycode	(keycode),
		.code		(code)
	);


	/****************************************************************************/
	/* ASSIGN STATEMENTS														*/
	/****************************************************************************/
	assign enter_pressed	= (key_pressed && code == ENTER_KEY);
	assign input_pressed	= (key_pressed) && (code ~= INVALID_INPUT) && (code ~= ENTER_KEY);
	assign input_released	= key_released;

	assign red_pulse	= (dout == 4'd0);
	assign green_pulse	= (dout == 4'd1);
	assign yellow_pulse = (dout == 4'd2);
	assign blue_pulse	= (dout == 4'd3);
	
	assign raddr_eq_level	= (raddr == level);
	assign raddr_eq_max		= (raddr == MAX);
	assign waddr_eq_max		= (waddr == MAX);
	
	assign we = en_rng;	// only time we store data in RAM is when en_rng is true
	
	assign correct = (code == dout);
	
	/****************************************************************************/
	/* REGISTER UPDATES															*/
	/****************************************************************************/
	always @(posedge clk) begin
		if (en_raddr)
			if (s_raddr)
				raddr <= raddr + 1;
			else 
				raddr <= 0;
	end
	
	always @(posedge clk) begin
		if (en_waddr)
			if (s_waddr)
				waddr <= waddr + 1;
			else 
				waddr <= 0;
	end
	
	always @(posedge clk) begin
		if (en_level)
			if (s_level)
				level <= level + 1;
			else
				level <= 1;
	end
	
	always @(posedge clk) begin
		if (en_bg)
			case (s_bg) 
				0: bg = 4'd0;
				1: bg = 4'd1;
				2: bg = 4'd2;
				3: bg = 4'd3;
				4: bg = 4'd4;
				5: bg = 4'd5;
				6: bg = 4'd6;
				7: bg = 4'd7;
				default: bg = 4'd0;
			endcase
	end
	

		
	
endmodule
